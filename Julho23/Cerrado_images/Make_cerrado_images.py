# -*- coding: utf-8 -*-
"""
Created on Wed Jul 12 15:08:46 2023

@author: thiag
"""



# -*- coding: utf-8 -*-
"""GOES-16 products processing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tF-GMOUDRPZeFwslQd0fOeL_H1Jtu5mM

Fire product: 

OR_ABI-L2-FDCF-M3_G16_sYYYYJJJHHMMSSs_eYYYYJJJHHMMSSs_cYYYYJJJHHMMSSs.nc
"""

#!pip install s3fs xarray[complete] cartopy

#colorbarmin=0
#colorbarmax=0.5
#colorbarticknum=5
#cb.mappable.set_clim(colorbarmin,colorbarmax)
#cb.set_ticks(np.linspace(colorbarmin,colorbarmax,num=colorbarticknum+1))

# Commented out IPython magic to ensure Python compatibility.
import os
from io import BytesIO
import s3fs
import xarray as xr
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import cartopy.crs as ccrs
import numpy as np
import cartopy
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER as LongitudeFormatter
from cartopy.mpl.gridliner import LATITUDE_FORMATTER as LatitudeFormatter
from pyproj import Proj
import matplotlib.gridspec as gridspec
# from matplotlib.animation import ArtistAnimation, PillowWriter  


# from celluloid import Camera

# %matplotlib inline


# Initialize S3 file system
fs = s3fs.S3FileSystem(anon=True)
#fs.ls('s3://noaa-goes16/') # Uncomment this line to get the full list of available products 

# Get the fire product files for 1 hour of a specific date
# files = fs.ls('noaa-goes16/ABI-L2-FDCF/2020/228/07/') # list of 6 files for 2020 day 228, UTC time 15:00, 15:10, 15:20, ..., 15:50

#prodbase,plabel='OR_ABI-L2-FDCF-M6_G16_s',['Data Quality Flag','Fire Temperature (K)','Fire Area '+r'$(m^{2})$','Fire Mask','Fire Radiative Power (MW)']
prodbase,plabel='OR_ABI-L2-FDCF-M6_G16_s',['Data Quality Flag']


#Center point FEER database
#Latitude	Longitude	N_850	Nol_850	Ce_850	R2_850	QA_850
#-17,5	-57,5	58	0	0,00842	0,179	3
#-17,5	-56,5	108	0	0,0114	0,444	3
#-7,5	-60,5	46	0	0,0196	0,503	3

# center_point_lat = -7.5
# center_point_lon = -55.5 



# Define a ROI in degrees
# minlon,maxlon,minlat,maxlat=-62,-58,-9,-7.5
# minlon,maxlon,minlat,maxlat=-57,-54,-9,-6 #Amazon small box
#minlon,maxlon,minlat,maxlat=-80,-40,-30,5
#minlon,maxlon,minlat,maxlat=-61,-53,-20,-14
minlon,maxlon,minlat,maxlat=-58,-56,-18,-16 #Cerrado small box
# minlon,maxlon,minlat,maxlat=-57,-56.4,-17,-16.5
# minlon,maxlon,minlat,maxlat=center_point_lon-1.5,center_point_lon+1.5,center_point_lat-1.5,center_point_lat+1.5


# Set the projections
#ortho = ccrs.Orthographic(central_longitude=(minlon+maxlon)/2, central_latitude=(minlat+maxlat)/2)
newproj = ccrs.PlateCarree()
geo = ccrs.Geodetic()

# Setup colorbar for DQF: Data Quality Flag
# DQF values as follows: 0 = good quality fire pixel; 1 = good quality land pixel (no fire); 2 = invalid due to clouds; 3 = invalid due to surface type, glint, VZA limits, off earth, or missing input;
# 4 = invalid due to bad input data; 5 = invalid due to algorithm failure
Dcmap = colors.ListedColormap(['red', 'green','blue'])
Dnorm = colors.BoundaryNorm([31, 100, 200], Dcmap.N, clip=True)
Dticks=[0,50,100]
Dyticklabels=['0', '1', '2']
Dvmin, Dvmax=None,None

# Setup colorbar for Fire Temperature (K)
Tcmap = 'inferno'
Tnorm=None
Tticks=[400,500,600,700,800,900,1000,1100,1200,1300]
Tyticklabels=['400', '500', '600','700','800','900','1000','1100','1200','1300']
Tvmin, Tvmax=400,1300

# Setup colorbar for Fire Area (m^2)
Acmap = 'inferno'
Anorm=None
Aticks=[0,50000,100000,150000,200000]#,250000,300000]
Ayticklabels=['0', '50 k', '100 k','150 k','200 k']#,'250 k','300 k']
Avmin, Avmax=0,200000

# Setup colorbar for Fire Mask
Mcmap = 'gist_stern'
Mnorm = None
Mticks=[0,10,30,50,100,200,250]
Myticklabels=['0', '10', '30','50','100','200','250']
Mvmin, Mvmax=0,250

# Mcmap = 'gist_stern'
# Mnorm = None
# Mticks=[30,31,32,33,34,35]
# Myticklabels=['30','31','32','33','34','35']
# Mvmin, Mvmax=30,35

# Setup colorbar for Fire Radiative Power (MW)
Pcmap = 'inferno'
Pnorm = None
Pticks=[0,100,200,300,400,500]
Pyticklabels=['0', '100', '200','300','400','500']
Pvmin, Pvmax=0,500

# Plot setup lists
cmaplist=[Dcmap,Tcmap,Acmap,Mcmap,Pcmap]
normlist=[Dnorm,Tnorm,Anorm,Mnorm,Pnorm]
ticklist=[Dticks,Tticks,Aticks,Mticks,Pticks]
ticklabellist=[Dyticklabels,Tyticklabels,Ayticklabels,Myticklabels,Pyticklabels]
minlist=[Dvmin,Tvmin,Avmin,Mvmin,Pvmin]
maxlist=[Dvmax,Tvmax,Avmax,Mvmax,Pvmax]

fig = plt.figure(figsize=(8, 4))

ax = fig.add_subplot(1, 1, 1, projection=newproj)

# # fig.tight_layout(pad=7.0)
# gs = gridspec.GridSpec(2, 2)

# # ax = fig.add_subplot(2, 2, 2, projection=newproj)
# ax = fig.add_subplot(gs[:, 0], projection=newproj)
# # ax2 = fig.add_subplot(2,2,4)
# ax2 = fig.add_subplot(gs[0, 1])
# # ax3 = fig.add_subplot(2,1,1)
# ax3 = fig.add_subplot(gs[1, 1])

fig.tight_layout(pad=3)
ax.set_extent([minlon, maxlon, minlat, maxlat], crs=geo)
ax.coastlines(resolution='110m')
ax.add_feature(cartopy.feature.LAND)
# ax.add_feature(cartopy.feature.OCEAN)
ax.add_feature(cartopy.feature.COASTLINE,linewidth=1.0)
# ax.add_feature(cartopy.feature.BORDERS, linestyle='-',linewidth=1.0)
# ax.add_feature(cartopy.feature.LAKES)
gl=ax.gridlines(crs=newproj,draw_labels=True,linewidth=0.5, color='black', alpha=0.5, linestyle='--')
gl.xlabels_top=False
gl.ylabels_right=False
gl.xformatter = LongitudeFormatter
gl.yformatter = LatitudeFormatter
#gl.xlabel_style = {'size': 15, 'color': 'gray'}
#gl.xlabel_style = {'color': 'red', 'weight': 'bold'}
cax = fig.add_axes([ax.get_position().x1+0.01,ax.get_position().y0,0.02,ax.get_position().height])    

        


images = []
for d in range(230,232):
    for j in range(0,24):
        files = fs.ls('noaa-goes16/ABI-L2-FDCF/2020/'+str(d)+'/'+str(j).zfill(2)+'/') # list of 6 files for 2020 day 228, UTC time 15:00, 15:10, 15:20, ..., 15:50
        print('Processing hour: ' + str(j).zfill(2))              
    # while i<len(files): #len(files):
        for i in range(0,len(files)):
            with fs.open(files[i], 'rb') as f:
                ds = xr.open_dataset(BytesIO(f.read()), engine='h5netcdf')
            if i==0: 
                # sat_h = ds.goes_imager_projection.perspective_point_height[0]
                # sat_lon = ds.goes_imager_projection.longitude_of_projection_origin[0]
                # sat_sweep = ds.goes_imager_projection.sweep_angle_axis[0]
                sat_h = ds.goes_imager_projection.perspective_point_height
                sat_lon = ds.goes_imager_projection.longitude_of_projection_origin
                sat_sweep = ds.goes_imager_projection.sweep_angle_axis
                oproj=ccrs.Geostationary(central_longitude=sat_lon,satellite_height=sat_h,sweep_axis=sat_sweep)
                p = Proj(proj='geos', h=sat_h, lon_0=sat_lon, sweep=sat_sweep)
                X = np.array(ds.x) * sat_h
                Y = np.array(ds.y) * sat_h
                XX, YY = np.meshgrid(X,Y)
                rlon, rlat = p(XX, YY, inverse=True)
                box=(rlat>=minlat)&(rlat<=maxlat)&(rlon>=minlon)&(rlon<=maxlon)
                # print(np.where(box==True))
                # print(box.astype(int))
                Ib = np.invert(box)
                C = Ib.astype(int)
                            

            M = np.array(ds.Mask)
            T = np.array(ds.Temp)
            P = np.array(ds.Power)
            # print(M)

            # print(M[box])
            M_box = np.ma.masked_array(M,mask=C)
            T_box = np.ma.masked_array(T,mask=C)
            P_box = np.ma.masked_array(P,mask=C)
            array_T_box = T_box.compressed()[~np.isnan(T_box.compressed())]
            array_P_box = P_box.compressed()[~np.isnan(P_box.compressed())]
            
        
            starttime=files[i].split(prodbase)[1].split('_')[0]
            year,julian,hhmm=starttime[:4],starttime[4:7],starttime[7:11]
            plottitle=year+'-'+julian+'-'+hhmm
        
            # for j in range(0,len(plabel)):
            #plt.title(plottitle+'    '+plabel[0],loc='center')
            # Z=varlist[0]
            im = ax.imshow(M_box,transform=oproj, cmap=cmaplist[3], norm=normlist[3],vmin=minlist[3],vmax=maxlist[3])
            ax.set_title(plottitle+'    '+plabel[0],loc='center')
            cb = fig.colorbar(im,cax=cax, ticks=ticklist[3] ,orientation="vertical",shrink=0.7,pad=0.02)
            cb.ax.set_yticklabels(ticklabellist[3]) 
            cb.ax.tick_params(size=0)
            #cb.set_label(plabel[0])
            
            # ax2.hist(array_T_box)
            # ax2.axvspan(500, 700, alpha=0.5, color='red')
            # ax2.axvspan(800, 1200, alpha=0.5, color='yellow')
            # ax2.set_xlabel('Temperature(K)')
            
            # ax3.hist(array_P_box)
            # ax3.set_xlabel('FRP(MW)')
            # ax2.axvline(700, color='y')
            
            
            plt.savefig('DQF_cerrado_small_box'+plottitle+'.png', dpi = 200)
            
            # ax2.clear()
            # ax3.clear()
            
              
            print('minute:',i*10)
        
        
            # i=i+1
  
########################################################################################
print('Done')
#######################################################################################


